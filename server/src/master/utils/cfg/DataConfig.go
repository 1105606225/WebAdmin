// Generated by tabtoy
// Version: 2.8.6
// DO NOT EDIT!!
package cfg

import (
	"fmt"
	"encoding/json"
	"io/ioutil"
)

// Defined in table: DataConfig
type DataConfig struct {

	//Equip
	Equip []*EquipDefine

	//Item
	Item []*ItemDefine
}

// Defined in table: Equip
type EquipDefine struct {

	//唯一ID
	ID int32

	//名字
	Name string

	//描述
	Desc string
}

// Defined in table: Item
type ItemDefine struct {

	//唯一ID
	ID int32

	//名字
	Name string

	//描述
	Desc string
}

// DataConfig 访问接口
type DataConfigTable struct {

	// 表格原始数据
	DataConfig

	// 索引函数表
	indexFuncByName map[string][]func(*DataConfigTable) error

	// 清空函数表
	clearFuncByName map[string][]func(*DataConfigTable) error

	// 加载前回调
	preFuncList []func(*DataConfigTable) error

	// 加载后回调
	postFuncList []func(*DataConfigTable) error

	EquipByID map[int32]*EquipDefine

	ItemByID map[int32]*ItemDefine
}

// 从json文件加载
func (self *DataConfigTable) Load(filename string) error {

	data, err := ioutil.ReadFile(filename)

	if err != nil {
		return err
	}

	var newTab DataConfig

	// 读取
	err = json.Unmarshal(data, &newTab)
	if err != nil {
		return err
	}

	// 所有加载前的回调
	for _, v := range self.preFuncList {
		if err = v(self); err != nil {
			return err
		}
	}

	// 清除前通知
	for _, list := range self.clearFuncByName {
		for _, v := range list {
			if err = v(self); err != nil {
				return err
			}
		}
	}

	// 复制数据
	self.DataConfig = newTab

	// 生成索引
	for _, list := range self.indexFuncByName {
		for _, v := range list {
			if err = v(self); err != nil {
				return err
			}
		}
	}

	// 所有完成时的回调
	for _, v := range self.postFuncList {
		if err = v(self); err != nil {
			return err
		}
	}

	return nil
}

// 注册外部索引入口, 索引回调, 清空回调
func (self *DataConfigTable) RegisterIndexEntry(name string, indexCallback func(*DataConfigTable) error, clearCallback func(*DataConfigTable) error) {

	indexList, _ := self.indexFuncByName[name]
	clearList, _ := self.clearFuncByName[name]

	if indexCallback != nil {
		indexList = append(indexList, indexCallback)
	}

	if clearCallback != nil {
		clearList = append(clearList, clearCallback)
	}

	self.indexFuncByName[name] = indexList
	self.clearFuncByName[name] = clearList
}

// 注册加载前回调
func (self *DataConfigTable) RegisterPreEntry(callback func(*DataConfigTable) error) {

	self.preFuncList = append(self.preFuncList, callback)
}

// 注册所有完成时回调
func (self *DataConfigTable) RegisterPostEntry(callback func(*DataConfigTable) error) {

	self.postFuncList = append(self.postFuncList, callback)
}

// 创建一个DataConfig表读取实例
func NewDataConfigTable() *DataConfigTable {
	return &DataConfigTable{

		indexFuncByName: map[string][]func(*DataConfigTable) error{

			"Equip": {func(tab *DataConfigTable) error {

				// Equip
				for _, def := range tab.Equip {

					if _, ok := tab.EquipByID[def.ID]; ok {
						panic(fmt.Sprintf("duplicate index in EquipByID: %v", def.ID))
					}

					tab.EquipByID[def.ID] = def

				}

				return nil
			}},

			"Item": {func(tab *DataConfigTable) error {

				// Item
				for _, def := range tab.Item {

					if _, ok := tab.ItemByID[def.ID]; ok {
						panic(fmt.Sprintf("duplicate index in ItemByID: %v", def.ID))
					}

					tab.ItemByID[def.ID] = def

				}

				return nil
			}},
		},

		clearFuncByName: map[string][]func(*DataConfigTable) error{

			"Equip": {func(tab *DataConfigTable) error {

				// Equip

				tab.EquipByID = make(map[int32]*EquipDefine)

				return nil
			}},

			"Item": {func(tab *DataConfigTable) error {

				// Item

				tab.ItemByID = make(map[int32]*ItemDefine)

				return nil
			}},
		},

		EquipByID: make(map[int32]*EquipDefine),

		ItemByID: make(map[int32]*ItemDefine),
	}
}
