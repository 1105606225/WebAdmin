// Generated by tabtoy
// Version: 2.8.6
// DO NOT EDIT!!
using System.Collections.Generic;

namespace cfg
{
	
	

	// Defined in table: DataConfig
	
	public partial class DataConfig
	{
	
		public tabtoy.Logger TableLogger = new tabtoy.Logger();
	
		
		/// <summary> 
		/// Equip
		/// </summary>
		public List<EquipDefine> Equip = new List<EquipDefine>(); 
		
		/// <summary> 
		/// Item
		/// </summary>
		public List<ItemDefine> Item = new List<ItemDefine>(); 
	
	
		#region Index code
	 	Dictionary<int, EquipDefine> _EquipByID = new Dictionary<int, EquipDefine>();
        public EquipDefine GetEquipByID(int ID, EquipDefine def = default(EquipDefine))
        {
            EquipDefine ret;
            if ( _EquipByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(EquipDefine) )
			{
				TableLogger.ErrorLine("GetEquipByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<int, ItemDefine> _ItemByID = new Dictionary<int, ItemDefine>();
        public ItemDefine GetItemByID(int ID, ItemDefine def = default(ItemDefine))
        {
            ItemDefine ret;
            if ( _ItemByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(ItemDefine) )
			{
				TableLogger.ErrorLine("GetItemByID failed, ID: {0}", ID);
			}

            return def;
        }
		
	
		#endregion
		#region Deserialize code
		
		static tabtoy.DeserializeHandler<DataConfig> DataConfigDeserializeHandler = new tabtoy.DeserializeHandler<DataConfig>(Deserialize);
		public static void Deserialize( DataConfig ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0xa0000:
                	{
						ins.Equip.Add( reader.ReadStruct<EquipDefine>(EquipDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0001:
                	{
						ins.Item.Add( reader.ReadStruct<ItemDefine>(ItemDefineDeserializeHandler) );
                	}
                	break; 
                }
             }

			
			// Build Equip Index
			for( int i = 0;i< ins.Equip.Count;i++)
			{
				var element = ins.Equip[i];
				
				ins._EquipByID.Add(element.ID, element);
				
			}
			
			// Build Item Index
			for( int i = 0;i< ins.Item.Count;i++)
			{
				var element = ins.Item[i];
				
				ins._ItemByID.Add(element.ID, element);
				
			}
			
		}
		static tabtoy.DeserializeHandler<EquipDefine> EquipDefineDeserializeHandler = new tabtoy.DeserializeHandler<EquipDefine>(Deserialize);
		public static void Deserialize( EquipDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.Desc = reader.ReadString();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.Icon = reader.ReadString();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.EquipType = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.Qua = reader.ReadInt32();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.Dura = reader.ReadInt32();
                	}
                	break; 
                	case 0x10007:
                	{
						ins.NeedLev = reader.ReadInt32();
                	}
                	break; 
                	case 0x10008:
                	{
						ins.NeedSex = reader.ReadInt32();
                	}
                	break; 
                	case 0x10009:
                	{
						ins.NeedMartial = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000a:
                	{
						ins.LiDao = reader.ReadInt32();
                	}
                	break; 
                	case 0x6000b:
                	{
						ins.LiDaoStage = reader.ReadString();
                	}
                	break; 
                	case 0x1000c:
                	{
						ins.NeiJin = reader.ReadInt32();
                	}
                	break; 
                	case 0x6000d:
                	{
						ins.NeiJinStage = reader.ReadString();
                	}
                	break; 
                	case 0x1000e:
                	{
						ins.GenGu = reader.ReadInt32();
                	}
                	break; 
                	case 0x6000f:
                	{
						ins.GenGuStage = reader.ReadString();
                	}
                	break; 
                	case 0x10010:
                	{
						ins.ShenFa = reader.ReadInt32();
                	}
                	break; 
                	case 0x60011:
                	{
						ins.ShenFaStage = reader.ReadString();
                	}
                	break; 
                	case 0x10012:
                	{
						ins.QiXue = reader.ReadInt32();
                	}
                	break; 
                	case 0x10013:
                	{
						ins.QiXueIntensity = reader.ReadInt32();
                	}
                	break; 
                	case 0x10014:
                	{
						ins.ZhenQi = reader.ReadInt32();
                	}
                	break; 
                	case 0x10015:
                	{
						ins.ZhenQiIntensity = reader.ReadInt32();
                	}
                	break; 
                	case 0x10016:
                	{
						ins.WaiGong = reader.ReadInt32();
                	}
                	break; 
                	case 0x10017:
                	{
						ins.WaiGongIntensity = reader.ReadInt32();
                	}
                	break; 
                	case 0x10018:
                	{
						ins.WaiFang = reader.ReadInt32();
                	}
                	break; 
                	case 0x10019:
                	{
						ins.WaiFangIntensity = reader.ReadInt32();
                	}
                	break; 
                	case 0x1001a:
                	{
						ins.NeiGong = reader.ReadInt32();
                	}
                	break; 
                	case 0x1001b:
                	{
						ins.NeiGongIntensity = reader.ReadInt32();
                	}
                	break; 
                	case 0x1001c:
                	{
						ins.NeiFang = reader.ReadInt32();
                	}
                	break; 
                	case 0x1001d:
                	{
						ins.NeiFangIntensity = reader.ReadInt32();
                	}
                	break; 
                	case 0x1001e:
                	{
						ins.MingZhong = reader.ReadInt32();
                	}
                	break; 
                	case 0x1001f:
                	{
						ins.MingZhongIntensity = reader.ReadInt32();
                	}
                	break; 
                	case 0x10020:
                	{
						ins.ShanBi = reader.ReadInt32();
                	}
                	break; 
                	case 0x10021:
                	{
						ins.ShanBiIntensity = reader.ReadInt32();
                	}
                	break; 
                	case 0x10022:
                	{
						ins.BaoJi = reader.ReadInt32();
                	}
                	break; 
                	case 0x10023:
                	{
						ins.BaoJiIntensity = reader.ReadInt32();
                	}
                	break; 
                	case 0x10024:
                	{
						ins.KangBao = reader.ReadInt32();
                	}
                	break; 
                	case 0x10025:
                	{
						ins.KangBaoIntensity = reader.ReadInt32();
                	}
                	break; 
                	case 0x60026:
                	{
						ins.RandAttrValue_1 = reader.ReadString();
                	}
                	break; 
                	case 0x60027:
                	{
						ins.RandAttrValue_2 = reader.ReadString();
                	}
                	break; 
                	case 0x60028:
                	{
						ins.RandAttrValue_3 = reader.ReadString();
                	}
                	break; 
                	case 0x60029:
                	{
						ins.RandAttrValue_4 = reader.ReadString();
                	}
                	break; 
                	case 0x6002a:
                	{
						ins.RandAttrValue_5 = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
		static tabtoy.DeserializeHandler<ItemDefine> ItemDefineDeserializeHandler = new tabtoy.DeserializeHandler<ItemDefine>(Deserialize);
		public static void Deserialize( ItemDefine ins, tabtoy.DataReader reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.Desc = reader.ReadString();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.Icon = reader.ReadString();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.Qua = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.Type = reader.ReadInt32();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.Dura = reader.ReadInt32();
                	}
                	break; 
                	case 0x10007:
                	{
						ins.PriceType = reader.ReadInt32();
                	}
                	break; 
                	case 0x10008:
                	{
						ins.Price = reader.ReadInt32();
                	}
                	break; 
                	case 0x10009:
                	{
						ins.SellPrice = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000a:
                	{
						ins.IsPack = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000b:
                	{
						ins.MaxPackCount = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000c:
                	{
						ins.IsCanSell = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000d:
                	{
						ins.IsCanUse = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000e:
                	{
						ins.RewardID = reader.ReadInt32();
                	}
                	break; 
                	case 0x1000f:
                	{
						ins.ComposeID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10010:
                	{
						ins.Lv = reader.ReadInt32();
                	}
                	break; 
                	case 0x10011:
                	{
						ins.Sex = reader.ReadInt32();
                	}
                	break; 
                	case 0x10012:
                	{
						ins.School = reader.ReadInt32();
                	}
                	break; 
                	case 0x10013:
                	{
						ins.GestPhase = reader.ReadInt32();
                	}
                	break; 
                	case 0x10014:
                	{
						ins.GestPhaseLv = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		#endregion
	

	} 

	// Defined in table: Equip
	[System.Serializable]
	public partial class EquipDefine
	{
	
		
		/// <summary> 
		/// 唯一ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 名字
		/// </summary>
		public string Name = ""; 
		
		/// <summary> 
		/// 描述
		/// </summary>
		public string Desc = ""; 
		
		/// <summary> 
		/// 图标
		/// </summary>
		public string Icon = ""; 
		
		/// <summary> 
		/// 装备类型
		/// </summary>
		public int EquipType = 0; 
		
		/// <summary> 
		/// 品质
		/// </summary>
		public int Qua = 0; 
		
		/// <summary> 
		/// 装备耐久
		/// </summary>
		public int Dura = 0; 
		
		/// <summary> 
		/// 需要等级
		/// </summary>
		public int NeedLev = 0; 
		
		/// <summary> 
		/// 需要性别
		/// </summary>
		public int NeedSex = 0; 
		
		/// <summary> 
		/// 需要门派
		/// </summary>
		public int NeedMartial = 0; 
		
		/// <summary> 
		/// 力道
		/// </summary>
		public int LiDao = 0; 
		
		/// <summary> 
		/// 力道进阶
		/// </summary>
		public string LiDaoStage = ""; 
		
		/// <summary> 
		/// 内劲
		/// </summary>
		public int NeiJin = 0; 
		
		/// <summary> 
		/// 内劲进阶
		/// </summary>
		public string NeiJinStage = ""; 
		
		/// <summary> 
		/// 根骨
		/// </summary>
		public int GenGu = 0; 
		
		/// <summary> 
		/// 根骨进阶
		/// </summary>
		public string GenGuStage = ""; 
		
		/// <summary> 
		/// 身法
		/// </summary>
		public int ShenFa = 0; 
		
		/// <summary> 
		/// 身法进阶
		/// </summary>
		public string ShenFaStage = ""; 
		
		/// <summary> 
		/// 气血
		/// </summary>
		public int QiXue = 0; 
		
		/// <summary> 
		/// 气血强化基础值
		/// </summary>
		public int QiXueIntensity = 0; 
		
		/// <summary> 
		/// 真气
		/// </summary>
		public int ZhenQi = 0; 
		
		/// <summary> 
		/// 真气强化基础值
		/// </summary>
		public int ZhenQiIntensity = 0; 
		
		/// <summary> 
		/// 外攻
		/// </summary>
		public int WaiGong = 0; 
		
		/// <summary> 
		/// 外攻强化基础值
		/// </summary>
		public int WaiGongIntensity = 0; 
		
		/// <summary> 
		/// 外防
		/// </summary>
		public int WaiFang = 0; 
		
		/// <summary> 
		/// 外防强化基础值
		/// </summary>
		public int WaiFangIntensity = 0; 
		
		/// <summary> 
		/// 内攻
		/// </summary>
		public int NeiGong = 0; 
		
		/// <summary> 
		/// 内攻强化基础值
		/// </summary>
		public int NeiGongIntensity = 0; 
		
		/// <summary> 
		/// 内防
		/// </summary>
		public int NeiFang = 0; 
		
		/// <summary> 
		/// 内防强化基础值
		/// </summary>
		public int NeiFangIntensity = 0; 
		
		/// <summary> 
		/// 命中
		/// </summary>
		public int MingZhong = 0; 
		
		/// <summary> 
		/// 命中强化基础值
		/// </summary>
		public int MingZhongIntensity = 0; 
		
		/// <summary> 
		/// 闪避
		/// </summary>
		public int ShanBi = 0; 
		
		/// <summary> 
		/// 闪避强化基础值
		/// </summary>
		public int ShanBiIntensity = 0; 
		
		/// <summary> 
		/// 暴击
		/// </summary>
		public int BaoJi = 0; 
		
		/// <summary> 
		/// 暴击强化基础值
		/// </summary>
		public int BaoJiIntensity = 0; 
		
		/// <summary> 
		/// 抗暴值
		/// </summary>
		public int KangBao = 0; 
		
		/// <summary> 
		/// 抗暴值强化基础值
		/// </summary>
		public int KangBaoIntensity = 0; 
		
		/// <summary> 
		/// 隐藏属性值1
		/// </summary>
		public string RandAttrValue_1 = ""; 
		
		/// <summary> 
		/// 隐藏属性值2
		/// </summary>
		public string RandAttrValue_2 = ""; 
		
		/// <summary> 
		/// 隐藏属性值3
		/// </summary>
		public string RandAttrValue_3 = ""; 
		
		/// <summary> 
		/// 隐藏属性值4
		/// </summary>
		public string RandAttrValue_4 = ""; 
		
		/// <summary> 
		/// 隐藏属性值5
		/// </summary>
		public string RandAttrValue_5 = ""; 
	
	

	} 

	// Defined in table: Item
	[System.Serializable]
	public partial class ItemDefine
	{
	
		
		/// <summary> 
		/// 唯一ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 名字
		/// </summary>
		public string Name = ""; 
		
		/// <summary> 
		/// 描述
		/// </summary>
		public string Desc = ""; 
		
		/// <summary> 
		/// 图标
		/// </summary>
		public string Icon = ""; 
		
		/// <summary> 
		/// 品质
		/// </summary>
		public int Qua = 0; 
		
		/// <summary> 
		/// 物品类型
		/// </summary>
		public int Type = 0; 
		
		/// <summary> 
		/// 耐久
		/// </summary>
		public int Dura = 0; 
		
		/// <summary> 
		/// 价格类型
		/// </summary>
		public int PriceType = 0; 
		
		/// <summary> 
		/// 购买价格
		/// </summary>
		public int Price = 0; 
		
		/// <summary> 
		/// 出售价格
		/// </summary>
		public int SellPrice = 0; 
		
		/// <summary> 
		/// 是否能叠加
		/// </summary>
		public int IsPack = 0; 
		
		/// <summary> 
		/// 最大叠加数量
		/// </summary>
		public int MaxPackCount = 0; 
		
		/// <summary> 
		/// 是否能销售
		/// </summary>
		public int IsCanSell = 0; 
		
		/// <summary> 
		/// 是否能使用
		/// </summary>
		public int IsCanUse = 0; 
		
		/// <summary> 
		/// 奖励ID
		/// </summary>
		public int RewardID = 0; 
		
		/// <summary> 
		/// 合成ID
		/// </summary>
		public int ComposeID = 0; 
		
		/// <summary> 
		/// 等级限制
		/// </summary>
		public int Lv = 0; 
		
		/// <summary> 
		/// 性别限制
		/// </summary>
		public int Sex = 0; 
		
		/// <summary> 
		/// 门派限制
		/// </summary>
		public int School = 0; 
		
		/// <summary> 
		/// 武功境界类型
		/// </summary>
		public int GestPhase = 0; 
		
		/// <summary> 
		/// 武功境界等级
		/// </summary>
		public int GestPhaseLv = 0; 
	
	

	} 

}
